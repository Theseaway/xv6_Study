diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
index 0000000..a55e7a1
--- /dev/null
+++ b/.idea/codeStyles/codeStyleConfig.xml
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..53624c9
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MakefileSettings">
+    <option name="linkedExternalProjectsSettings">
+      <MakefileProjectSettings>
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+        <option name="version" value="2" />
+      </MakefileProjectSettings>
+    </option>
+  </component>
+  <component name="MakefileWorkspace" PROJECT_DIR="$PROJECT_DIR$" />
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..7dc0b6f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -145,7 +145,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
-
+int             lazy_allocate(uint64,pagetable_t);
 // uart.c
 void            uartinit(void);
 void            uartintr(void);
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..e3ae95b 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -47,8 +47,13 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
+  struct  proc *p = myproc();
+  if (n < 0)
+  {
+      if (p->sz + n < 0) return -1;
+      else uvmdealloc(p->pagetable, p->sz, p->sz + n);
+  }
+  p->sz += n;
   return addr;
 }
 
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..e63d795 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,7 +67,12 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if(r_scause() == 13 || r_scause() == 15){
+      uint64 stval_ = r_stval();
+      uint64 va = PGROUNDDOWN(stval_);
+      if(lazy_allocate(va,p->pagetable) < 0)
+          p->killed = 1;
+  }else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
@@ -83,6 +88,23 @@ usertrap(void)
   usertrapret();
 }
 
+
+int lazy_allocate(uint64 va,pagetable_t pagetable){
+    struct proc *p = myproc();
+    if(va >= p->sz)
+        return -1;
+    if(va <p->trapframe->sp)
+        return -2;
+    uint64 ka = (uint64)kalloc();
+    if( ka == 0)
+        return -3;
+    memset((void*)ka, 0, PGSIZE);
+    if(mappages(pagetable, va, PGSIZE, ka, PTE_W|PTE_X|PTE_R|PTE_U) != 0){
+        kfree((void*)ka);
+        return -4;
+    }
+    return 0;
+}
 //
 // return to user space
 //
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..f6de064 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,7 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
-
+#include "spinlock.h"
+#include "proc.h"
 /*
  * the kernel's page table.
  */
@@ -99,12 +100,25 @@ walkaddr(pagetable_t pagetable, uint64 va)
 
   if(va >= MAXVA)
     return 0;
-
+  struct proc *p = myproc();
   pte = walk(pagetable, va, 0);
-  if(pte == 0)
-    return 0;
-  if((*pte & PTE_V) == 0)
-    return 0;
+  if(pte == 0 || (*pte & PTE_V) == 0)
+  {
+      if (va >= p->sz || va < PGROUNDUP(p->trapframe->sp))
+          return 0;
+      uint64 ka = (uint64)kalloc();
+      if (ka == 0)
+      {
+          return 0;
+      }
+      // 因为考虑到系统调用，需要和之前额外添加PTE_X
+      if (mappages(p->pagetable, PGROUNDDOWN(va), PGSIZE, ka, PTE_W|PTE_X|PTE_R|PTE_U) != 0)
+      {
+          kfree((void*)ka);
+          return 0;
+      }
+      return ka;
+  }
   if((*pte & PTE_U) == 0)
     return 0;
   pa = PTE2PA(*pte);
@@ -181,9 +195,11 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
+          // panic("uvmunmap: walk");
+        continue;
     if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+          // panic("uvmunmap: not mapped");
+        continue;
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -314,10 +330,10 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+      if((pte = walk(old, i, 0)) == 0)
+          continue;
+      if((*pte & PTE_V) == 0)
+          continue;
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
